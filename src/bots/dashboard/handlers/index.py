import sys
sys.path.append('../../../')

from bots.dashboard.utils import makeCleanTimestamp
from bots.dashboard.alerts import setAlertLevel, getAlertLevel

from index.values import getLastIndexUpdates, getIndexValuesByPeriod
from index.utils import getIndexMeta, makeIndexHistoryGraphImage

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import datetime
from textwrap import dedent
from pathlib import Path
import os


router = Router(name=__name__)


@router.message(Command('index'))
@router.callback_query(F.data == 'index')
async def command_index(event: Message | CallbackQuery) -> None:
    last_index_update: dict = getLastIndexUpdates()[0]
    index_value = last_index_update['value']
    index_updated_at: datetime.datetime | None = last_index_update['updated_at']
    if index_updated_at:
        clean_index_updated_at: str = makeCleanTimestamp(index_updated_at)
    else:
        clean_index_updated_at = '–∏–Ω–¥–µ–∫—Å –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'
    index_title, index_emoji = getIndexMeta(index_value)
    
    message_text = dedent(f'''
        <b>üìä –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏</b>

        {index_emoji} –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω–¥–µ–∫—Å–∞: <b>{index_value} <i>({index_title})</i></b>

        üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{clean_index_updated_at}</b>
    ''')

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='üìà –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–µ–∫—Å–∞', callback_data='history')
    keyboard.button(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start')
    keyboard.adjust(1)

    kwargs = {
        'text': message_text,
        'parse_mode': 'HTML',
        'reply_markup': keyboard.as_markup(),
    }

    if isinstance(event, Message):
        await event.answer(**kwargs)
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(**kwargs)
        await event.answer()


@router.message(Command('history'))
@router.callback_query(F.data == 'history')
async def command_history(event: Message | CallbackQuery) -> None:
    now = datetime.datetime.now()
    start_timestamp = now - datetime.timedelta(hours=24)
    end_timestamp = now
    clean_start_timestamp: str = makeCleanTimestamp(start_timestamp)
    clean_end_timestamp: str = makeCleanTimestamp(end_timestamp)
    period = (start_timestamp, end_timestamp)

    index_period_values: dict = getIndexValuesByPeriod(period)
    if index_period_values:
        graph_created = True

        time_points: list[str] = [updated_at.hour for updated_at in index_period_values.keys()]
        index_points: list[int] = index_period_values.values()

        index_history_graph_image_path: Path = makeIndexHistoryGraphImage(time_points, index_points)
        index_history_graph_image = FSInputFile(str(index_history_graph_image_path))

        caption_text = dedent(f'''
            *üìà –ì—Ä–∞—Ñ–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞*

            ‚è∞ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: —Å *{clean_start_timestamp}* –¥–æ *{clean_end_timestamp}*
        ''')

        kwargs = {
            'photo': index_history_graph_image,
            'caption': caption_text,
            'parse_mode': 'Markdown'
        }
    else:
        graph_created = False
        kwargs = {
            'text': '*üìÇ –ò–Ω–¥–µ–∫—Å –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è.*',
            'parse_mode': 'Markdown'
        }

    if isinstance(event, Message):
        event_message = event
    elif isinstance(event, CallbackQuery):
        event_message = event.message
        await event.answer()

    if graph_created:
        message = await event_message.answer_photo(**kwargs)
        # Remove graph image
        if message and index_history_graph_image_path.exists():
            os.remove(index_history_graph_image_path)
    else:
        message = await event_message.answer(**kwargs)


@router.message(Command('alerts'))
@router.callback_query(F.data == 'alerts')
async def command_alerts(event: Message | CallbackQuery) -> None:
    user_id = event.from_user.id
    alert_level: int = getAlertLevel(user_id)

    if alert_level > 0:
        base_message_text = dedent(f'''
            *üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–∫–∞—á–∫–∞—Ö –∏–Ω–¥–µ–∫—Å–∞*

            üìä –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: *{alert_level} –ø–ø.* (–∏–∑–º–µ–Ω–∏—Ç—å: `/alerts <–∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤>`)

            üí° –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ {alert_level} –∏–ª–∏ –±–æ–ª–µ–µ –ø—É–Ω–∫—Ç–æ–≤ - –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.
        ''')
    else:
        base_message_text = dedent(f'''
            *üîï –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–∫–∞—á–∫–∞—Ö –∏–Ω–¥–µ–∫—Å–∞ (–æ—Ç–∫–ª—é—á–µ–Ω—ã)*

            üí° –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: `/alerts <–∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤>`
        ''')

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start')

    if isinstance(event, Message):
        message_text = event.text
        if len(message_parts := message_text.split()) > 1:
            alert_level = message_parts[1]

            if alert_level.isnumeric():
                alert_level = int(alert_level)

                if alert_level > 100:
                    message_text = '*‚ùå –ü–æ—Ä–æ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –ø—É–Ω–∫—Ç–æ–≤*'
                else:
                    setAlertLevel(user_id, alert_level)

                    if alert_level > 0:
                        message_text = dedent(f'''
                            *‚úÖ –ü–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω*

                            –¢–µ–ø–µ—Ä—å –æ–ø–æ–≤—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å, –∫–æ–≥–¥–∞ –∏–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ *{alert_level}* 
                            –∏–ª–∏ –±–æ–ª–µ–µ –ø—É–Ω–∫—Ç–æ–≤.

                            üí° –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: `/alerts 0`
                        ''')
                    else:
                        message_text = '*üîï –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–∫–∞—á–∫–∞—Ö –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã.*'

            else:
                message_text = dedent(f'''
                    *‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è*

                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.

                    üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞, –≤–≤–µ–¥–∏—Ç–µ: `/alerts <–∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤>`
                ''')
        else:
            message_text = base_message_text

        await event.answer(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup(),
        )

    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(
            text=base_message_text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup(),
        )
        await event.answer()
